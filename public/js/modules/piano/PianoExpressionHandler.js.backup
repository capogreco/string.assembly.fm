/**
 * PianoExpressionHandler Module for String Assembly FM
 * Handles gesture detection and expression visualization for the piano roll
 * Adapted from SVGInteractiveExpression
 */

export class PianoExpressionHandler {
  constructor(pianoKeyboard) {
    this.pianoKeyboard = pianoKeyboard;
    this.svg = pianoKeyboard.pianoElement;

    // Expression state
    this.expressions = new Map(); // note -> expression data
    this.chordNotes = new Set(); // notes that are part of the current chord
    this.relatedNotes = new Map(); // note -> {relatedTo: note, type: 'trill-target'}

    // Gesture tracking
    this.isDragging = false;
    this.dragStartNote = null;
    this.dragStartFrequency = null;
    this.dragStartPos = null;
    this.currentDragPos = null;
    this.dragStartElement = null;

    // Visual indicators (SVG elements stored per note and type)
    // e.g., this.indicators.get(noteName) = { trill: pathElement, vibrato: textElement }
    this.indicators = new Map();

    // Gesture thresholds
    this.DRAG_THRESHOLD = 10; // pixels before drag is recognized
    this.VIBRATO_THRESHOLD = -30; // pixels up for vibrato
    this.TREMOLO_THRESHOLD = 30; // pixels down for tremolo
    this.HORIZONTAL_THRESHOLD = 15; // pixels horizontal to prioritize trill

    // Expression colors
    this.EXPRESSION_COLORS = {
      none: "#9b59b6", // Purple for chord notes without expression
      trill: "#3498db", // Blue
      vibrato: "#e74c3c", // Red
      tremolo: "#f39c12", // Orange
    };

    // Lighter shades for related notes (trill targets, etc)
    this.EXPRESSION_COLORS_LIGHT = {
      none: "#c39bd3",
      trill: "#85c1e2",
      vibrato: "#f1948a",
      tremolo: "#f8c471",
    };

    this.isInitialized = false;
  }

  /**
   * Initialize the expression handler
   */
  initialize() {
    if (this.isInitialized) return;

    // Set up event listeners
    this.setupEventListeners();

    // Sync with current chord state
    this.syncWithAppState();

    this.isInitialized = true;

    if (window.Logger) {
      window.Logger.log("PianoExpressionHandler initialized", "lifecycle");
    }
  }

  /**
   * Set up event listeners
   */
  setupEventListeners() {
    // Mouse events
    this.svg.addEventListener("mousedown", this.handleMouseDown.bind(this));
    document.addEventListener("mousemove", this.handleMouseMove.bind(this));
    document.addEventListener("mouseup", this.handleMouseUp.bind(this));

    // Touch events
    this.svg.addEventListener("touchstart", this.handleTouchStart.bind(this));
    document.addEventListener("touchmove", this.handleTouchMove.bind(this));
    document.addEventListener("touchend", this.handleTouchEnd.bind(this));

    // Listen for chord changes from PianoKeyboard
    this.pianoKeyboard.eventBus.on("piano:chordChanged", (data) => {
      this.handleChordChange(data);
    });
  }

  /**
   * Handle mouse down event
   */
  handleMouseDown(e) {
    const keyData = this.getKeyFromEvent(e);
    if (!keyData) return;

    this.startDrag(keyData, e.clientX, e.clientY);
    e.preventDefault();
  }

  /**
   * Handle touch start event
   */
  handleTouchStart(e) {
    if (e.touches.length !== 1) return;

    const touch = e.touches[0];
    const keyData = this.getKeyFromEvent(touch);
    if (!keyData) return;

    this.startDrag(keyData, touch.clientX, touch.clientY);
    e.preventDefault();
  }

  /**
   * Get key data from event
   */
  getKeyFromEvent(e) {
    const target = e.target;

    // Check if it's a piano key
    if (target.tagName === "rect" && target.hasAttribute("data-note-name")) {
      // Check if the key is out-of-range (disabled)
      if (
        target.classList.contains("out-of-range") ||
        target.style.pointerEvents === "none"
      ) {
        return null; // Don't process clicks/drags on disabled keys
      }

      const noteName = target.getAttribute("data-note-name");
      const frequency = parseFloat(target.getAttribute("data-frequency"));

      return {
        element: target,
        note: noteName,
        frequency: frequency,
      };
    }

    return null;
  }

  /**
   * Start drag gesture
   */
  startDrag(keyData, x, y) {
    // keyData = { element, note (name), frequency }

    // Instrument range check
    const instrumentRange = this.pianoKeyboard.getCurrentInstrumentRange();
    if (
      !instrumentRange ||
      keyData.frequency < instrumentRange.low ||
      keyData.frequency > instrumentRange.high
    ) {
      if (window.Logger) {
        const currentBodyType = this.pianoKeyboard.appState.get("bodyType");
        const bodyTypeName =
          currentBodyType !== undefined &&
          this.pianoKeyboard.getInstrumentRanges()[currentBodyType]
            ? this.pianoKeyboard.getInstrumentRanges()[currentBodyType].name
            : "None";
        window.Logger.log(
          `Note ${keyData.note} (${keyData.frequency.toFixed(
            2,
          )}Hz) is out of range for current instrument: ${bodyTypeName}. Interaction ignored.`,
          "info",
        );
      }
      return; // Do not start drag or any interaction
    }

    this.isDragging = true;
    this.dragStartNote = keyData.note;
    this.dragStartFrequency = keyData.frequency;
    this.dragStartElement = keyData.element;
    this.dragStartPos = { x, y };
    this.currentDragPos = { x, y };

    // Initial visual feedback for drag start (brightness)
    this.dragStartElement.style.filter = "brightness(1.2)";
    this.potentialExpressionType = null; // Reset potential expression
  }

  /**
   * Handle mouse/touch move
   */
  handleMouseMove(e) {
    if (!this.isDragging) return;
    this.updateDrag(e.clientX, e.clientY);
    e.preventDefault(); // Prevent text selection, etc.
  }

  handleTouchMove(e) {
    if (!this.isDragging || e.touches.length !== 1) return;
    const touch = e.touches[0];
    this.updateDrag(touch.clientX, touch.clientY);
    e.preventDefault();
  }

  /**
   * Update drag position and provide real-time feedback
   */
  updateDrag(x, y) {
    if (!this.isDragging) return;

    this.currentDragPos = { x, y };

    const dx = this.currentDragPos.x - this.dragStartPos.x;
    const dy = this.currentDragPos.y - this.dragStartPos.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    let newPotentialType = null;

    if (distance > this.DRAG_THRESHOLD) {
      // Determine potential expression type
      if (Math.abs(dx) > this.HORIZONTAL_THRESHOLD) {
        newPotentialType = "trill";
      } else if (dy < this.VIBRATO_THRESHOLD) {
        newPotentialType = "vibrato";
      } else if (dy > this.TREMOLO_THRESHOLD) {
        newPotentialType = "tremolo";
      } else {
        // Still a drag, but not a specific expression gesture yet
        // Could be considered 'none' or a generic drag
        newPotentialType = "drag"; // A generic drag state
      }

      if (this.potentialExpressionType !== newPotentialType) {
        this.potentialExpressionType = newPotentialType;

        // Update source note color based on potential expression
        let color = this.EXPRESSION_COLORS.none; // Default to 'none' color if just dragging
        if (this.potentialExpressionType === "trill") {
          color = this.EXPRESSION_COLORS.trill;
        } else if (this.potentialExpressionType === "vibrato") {
          color = this.EXPRESSION_COLORS.vibrato;
        } else if (this.potentialExpressionType === "tremolo") {
          color = this.EXPRESSION_COLORS.tremolo;
        }
        // If type is 'drag' but not specific, keep it distinct or 'none'
        // For now, 'drag' will also use 'none' color. Or make it a neutral drag color.
        // To ensure it looks different from a simple click 'none', let's use a temp color or rely on brightness.
        // For now, EXPRESSION_COLORS.none is purple, which is what a clicked note becomes.
        // This provides immediate feedback that the note is being interacted with.
        // If 'drag' should have a different color, we can add to EXPRESSION_COLORS.
        this.dragStartElement.setAttribute("fill", color);
      }
    } else {
      // Not a drag yet (or dragged back under threshold)
      // Restore original color (or just rely on brightness filter)
      // and clear potential expression type
      if (this.potentialExpressionType) {
        this.potentialExpressionType = null;
        const originalFill =
          this.dragStartElement.getAttribute("data-original-fill") ||
          (this.dragStartElement.classList.contains("white-key")
            ? "white"
            : "#333");
        this.dragStartElement.setAttribute("fill", originalFill);
      }
    }

    // TODO: Add drawing of temporary SVG indicators (drag lines, depth text) here
  }

  /**
   * Handle mouse/touch up
   */
  handleMouseUp(e) {
    if (!this.isDragging) return;
    this.endDrag(e.clientX, e.clientY);
  }

  handleTouchEnd(e) {
    if (!this.isDragging) return;

    // Use last known position for touch end
    this.endDrag(this.currentDragPos.x, this.currentDragPos.y);
  }

  /**
   * End drag gesture and determine expression
   */
  endDrag(x, y) {
    const dx = x - this.dragStartPos.x;
    const dy = y - this.dragStartPos.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    // Determine expression type based on drag
    let expression = null;

    if (distance < this.DRAG_THRESHOLD) {
      // Simple click - toggle note in chord
      if (this.chordNotes.has(this.dragStartNote)) {
        this.removeFromChord(this.dragStartNote);
      } else {
        this.addToChord(this.dragStartNote, this.dragStartFrequency);
        expression = { type: "none" };
      }
    } else if (Math.abs(dx) > this.HORIZONTAL_THRESHOLD) {
      // Horizontal drag - trill
      const targetKey = this.getKeyFromPosition(x, y);
      if (targetKey && targetKey.note !== this.dragStartNote) {
        this.addToChord(this.dragStartNote, this.dragStartFrequency);
        expression = {
          type: "trill",
          targetNote: targetKey.note,
          targetFrequency: targetKey.frequency,
        };
      }
    } else if (dy < this.VIBRATO_THRESHOLD) {
      // Upward drag - vibrato
      this.addToChord(this.dragStartNote, this.dragStartFrequency);
      expression = {
        type: "vibrato",
        depth: Math.min(1.0, Math.abs(dy - this.VIBRATO_THRESHOLD) / 50),
      };
    } else if (dy > this.TREMOLO_THRESHOLD) {
      // Downward drag - tremolo
      this.addToChord(this.dragStartNote, this.dragStartFrequency);
      expression = {
        type: "tremolo",
        depth: Math.min(1.0, Math.abs(dy - this.TREMOLO_THRESHOLD) / 50),
      };
    }

    // Set expression if determined
    if (expression) {
      // If it was a click that added a note, 'expression' is {type: 'none'}
      // If it was a drag, 'expression' is {type: 'trill/vibrato/tremolo', ...}
      this.setExpression(this.dragStartNote, expression);
    } else if (
      distance < this.DRAG_THRESHOLD &&
      !this.chordNotes.has(this.dragStartNote)
    ) {
      // If it was a click that REMOVED a note, expression is null.
      // Ensure the visual is restored to default if it wasn't handled by removeFromChord's updateKeyVisuals call.
      // This path (click that removed) should have already updated visuals via removeFromChord -> pianoKeyboard.remove -> event -> handleChordChange -> updateKeyVisuals
      // So, direct update here might be redundant unless there's a timing issue.
      // For safety, ensure its visual is default if no expression was set and it's not in chordNotes.
      this.updateKeyVisual(this.dragStartElement, this.dragStartNote);
    }

    // Clean up
    this.isDragging = false;
    if (this.dragStartElement) {
      // Ensure dragStartElement exists before trying to style it
      this.dragStartElement.style.filter = ""; // Remove brightness
    }
    this.potentialExpressionType = null; // Reset potential type
    this.dragStartNote = null;
    this.dragStartFrequency = null;
    this.dragStartElement = null;
  }

  /**
   * Get key from screen position
   */
  getKeyFromPosition(x, y) {
    const point = this.svg.createSVGPoint();
    point.x = x;
    point.y = y;

    // Convert to SVG coordinates
    const svgPoint = point.matrixTransform(this.svg.getScreenCTM().inverse());

    // Find key at position
    const keys = this.svg.querySelectorAll("rect[data-note-name]");
    for (const key of keys) {
      const rect = key.getBBox();
      if (
        svgPoint.x >= rect.x &&
        svgPoint.x <= rect.x + rect.width &&
        svgPoint.y >= rect.y &&
        svgPoint.y <= rect.y + rect.height
      ) {
        return {
          element: key,
          note: key.getAttribute("data-note-name"),
          frequency: parseFloat(key.getAttribute("data-frequency")),
        };
      }
    }

    return null;
  }

  /**
   * Add note to chord
   */
  addToChord(note, frequency) {
    if (!this.chordNotes.has(note)) {
      this.chordNotes.add(note);

      // Update PianoKeyboard's chord
      const currentChord =
        this.pianoKeyboard.appState.get("currentChord") || [];
      if (!currentChord.includes(frequency)) {
        this.pianoKeyboard.addNoteToChord(frequency);
      }
    }
  }

  /**
   * Remove note from chord
   */
  removeFromChord(note) {
    this.chordNotes.delete(note);
    this.expressions.delete(note);

    // Find frequency for this note
    const keys = this.svg.querySelectorAll("rect[data-note-name]");
    for (const key of keys) {
      if (key.getAttribute("data-note-name") === note) {
        const frequency = parseFloat(key.getAttribute("data-frequency"));
        this.pianoKeyboard.removeNoteFromChord(frequency);
        break;
      }
    }

    // Clean up related notes
    this.relatedNotes.forEach((relation, relatedNote) => {
      if (relation.relatedTo === note) {
        this.relatedNotes.delete(relatedNote);
      }
    });
  }

  /**
   * Set expression for a note
   */
  setExpression(note, expression) {
    // `note` is the source note (dragStartNote)
    // `expression` is the committed expression object e.g. {type: "none"}, {type: "trill", targetNote: ...} or null if removing via click.

    const oldExpression = this.expressions.get(note);

    // If new expression is effectively null (like after a click-off), remove existing.
    if (!expression || expression.type === "removed") {
      // "removed" might come from an explicit click-off logic
      if (oldExpression) {
        if (oldExpression.type === "trill") {
          this.removeIndicator(note, "trill");
          if (oldExpression.targetNote)
            this.relatedNotes.delete(oldExpression.targetNote);
        }
        // Add similar cleanup for vibrato/tremolo indicators
      }
      this.expressions.delete(note);
    } else {
      // Setting a new expression or updating an existing one
      if (oldExpression) {
        // If type changed, remove old indicators
        if (oldExpression.type === "trill" && expression.type !== "trill") {
          this.removeIndicator(note, "trill");
          if (oldExpression.targetNote)
            this.relatedNotes.delete(oldExpression.targetNote);
        }
        // Add similar for vibrato/tremolo if changing away from them
      }
      this.expressions.set(note, expression);
    }

    // Handle new trill target notes and draw indicator
    if (expression && expression.type === "trill" && expression.targetNote) {
      this.relatedNotes.set(expression.targetNote, {
        relatedTo: note,
        type: "trill-target",
      });
      this.drawTrillIndicatorSVG(note, expression.targetNote);
    }
    // else if (expression && expression.type === "vibrato") { this.drawVibratoIndicatorSVG(note, expression); }
    // else if (expression && expression.type === "tremolo") { this.drawTremoloIndicatorSVG(note, expression); }
    // Add other indicator drawing calls here

    // Update visuals for the affected note and any related notes (like trill target)
    this.updateKeyVisual(this.findKeyElement(note), note);
    if (expression && expression.type === "trill" && expression.targetNote) {
      this.updateKeyVisual(
        this.findKeyElement(expression.targetNote),
        expression.targetNote,
      );
    }
    if (
      oldExpression &&
      oldExpression.type === "trill" &&
      oldExpression.targetNote
    ) {
      // Ensure old target is also visually updated if it's no longer a target
      this.updateKeyVisual(
        this.findKeyElement(oldExpression.targetNote),
        oldExpression.targetNote,
      );
    }

    // Emit expression change event
    this.pianoKeyboard.eventBus.emit("expression:changed", {
      note,
      expression,
      allExpressions: this.getAllExpressions(),
    });
  }

  /**
   * Update visual state of all keys
   */
  updateKeyVisuals() {
    const keys = this.svg.querySelectorAll("rect[data-note-name]");

    keys.forEach((key) => {
      const note = key.getAttribute("data-note-name");
      this.updateKeyVisual(key, note);
    });
  }

  /**
   * Update visual state of a single key
   */
  updateKeyVisual(element, note) {
    // Get the original default fill color
    const originalFill =
      element.getAttribute("data-original-fill") ||
      (element.classList.contains("white-key") ? "white" : "#333"); // Fallback just in case

    if (this.chordNotes.has(note)) {
      // Note is in chord - use expression color
      const expression = this.expressions.get(note) || { type: "none" };
      const relation = this.relatedNotes.get(note);
      let color;
      if (relation) {
        // Use lighter shade for related notes
        const mainNote = relation.relatedTo;
        const mainExpression = this.expressions.get(mainNote) || {
          type: "none",
        };
        color = this.EXPRESSION_COLORS_LIGHT[mainExpression.type];
      } else {
        // Use full color for main notes
        color = this.EXPRESSION_COLORS[expression.type];
      }
      element.setAttribute("fill", color);
    } else {
      // Restore ACTUAL default color
      element.setAttribute("fill", originalFill);
    }
  }

  /**
   * Find key element by note name
   */
  findKeyElement(note) {
    return this.svg.querySelector(`rect[data-note-name="${note}"]`);
  }

  /**
   * Remove a specific type of visual indicator for a note.
   * @param {string} noteName - The name of the note (e.g., "C4").
   * @param {string} indicatorType - The type of indicator (e.g., "trill", "vibrato").
   * @private
   */
  removeIndicator(noteName, indicatorType) {
    const noteIndicators = this.indicators.get(noteName);
    if (noteIndicators && noteIndicators[indicatorType]) {
      noteIndicators[indicatorType].remove(); // Remove SVG element from DOM
      delete noteIndicators[indicatorType];
      if (Object.keys(noteIndicators).length === 0) {
        this.indicators.delete(noteName); // Remove entry for note if no indicators left
      }
    }
  }

  /**
   * Handle chord change from PianoKeyboard
   */
  handleChordChange(data) {
    // Sync chord notes
    this.chordNotes.clear();
    if (data.noteNames) {
      data.noteNames.forEach((note) => this.chordNotes.add(note));
    }

    // Clean up expressions for removed notes
    const validNotes = new Set(data.noteNames || []);
    Array.from(this.expressions.keys()).forEach((note) => {
      if (!validNotes.has(note)) {
        this.expressions.delete(note);
        // Also remove any indicators for notes no longer in the chord
        this.removeIndicator(note, "trill");
        this.removeIndicator(note, "vibrato");
        this.removeIndicator(note, "tremolo");
      }
    });

    // Update visuals
    this.updateKeyVisuals();
  }

  /**
   * Sync with current app state
   */
  syncWithAppState() {
    const currentChord = this.pianoKeyboard.appState.get("currentChord") || [];
    const noteNames = currentChord.map((freq) =>
      this.pianoKeyboard.frequencyToNoteName(freq),
    );

    this.handleChordChange({
      chord: currentChord,
      noteNames,
    });
  }

  /**
   * Get all expressions
   */
  getAllExpressions() {
    const result = {};
    this.expressions.forEach((expr, note) => {
      result[note] = expr;
    });
    return result;
  }

  /**
   * Clear all expressions and chord
   */
  clearAll() {
    this.chordNotes.clear();
    this.expressions.clear();
    this.relatedNotes.clear();

    // Remove all visual indicators
    this.indicators.forEach((noteIndicators, noteName) => {
      Object.values(noteIndicators).forEach((indicatorElement) =>
        indicatorElement.remove(),
      );
    });
    this.indicators.clear();

    this.updateKeyVisuals();
  }

  /**
   * Destroy the expression handler
   */
  destroy() {
    // Remove event listeners
    this.svg.removeEventListener("mousedown", this.handleMouseDown);
    document.removeEventListener("mousemove", this.handleMouseMove);
    document.removeEventListener("mouseup", this.handleMouseUp);
    this.svg.removeEventListener("touchstart", this.handleTouchStart);
    document.removeEventListener("touchmove", this.handleTouchMove);
    document.removeEventListener("touchend", this.handleTouchEnd);

    this.isInitialized = false;
  }

  /**
   * Draw an SVG trill indicator (curved dashed line) between two notes.
   * @param {string} sourceNoteName - The starting note of the trill.
   * @param {string} targetNoteName - The target note of the trill.
   * @private
   */
  drawTrillIndicatorSVG(sourceNoteName, targetNoteName) {
    this.removeIndicator(sourceNoteName, "trill"); // Remove old one if any

    const sourceElement = this.findKeyElement(sourceNoteName);
    const targetElement = this.findKeyElement(targetNoteName);

    if (!sourceElement || !targetElement || !this.svg) return;

    // Use getBoundingClientRect for screen positions, then convert to SVG space if needed,
    // or use getBBox for intrinsic SVG coordinates if appending to the SVG directly.
    // For simplicity, let's use getBBox assuming the path is appended to the same SVG.
    const sourceRect = sourceElement.getBBox();
    const targetRect = targetElement.getBBox();

    // Midpoint at the top edge of the keys
    const startX = sourceRect.x + sourceRect.width / 2;
    const startY = sourceRect.y;
    const endX = targetRect.x + targetRect.width / 2;
    const endY = targetRect.y;

    // Control point for the quadratic Bezier curve (to make it arc upwards)
    const controlX = (startX + endX) / 2;
    const controlY = Math.min(startY, endY) - 20; // Arc 20px above the higher key's top

    const pathD = `M ${startX},${startY} Q ${controlX},${controlY} ${endX},${endY}`;

    const pathElement = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "path",
    );
    pathElement.setAttribute("d", pathD);
    pathElement.setAttribute("stroke", this.EXPRESSION_COLORS.trill);
    pathElement.setAttribute("stroke-width", "2");
    pathElement.setAttribute("fill", "none");
    pathElement.setAttribute("stroke-dasharray", "4,2"); // Dashed line style
    pathElement.classList.add(
      "expression-indicator",
      `indicator-trill-${sourceNoteName.replace("#", "s")}`,
    ); // Sanitize ID

    this.svg.appendChild(pathElement); // Append to the main piano SVG

    // Store it so it can be removed later
    let noteIndicators = this.indicators.get(sourceNoteName);
    if (!noteIndicators) {
      noteIndicators = {};
      this.indicators.set(sourceNoteName, noteIndicators);
    }
    noteIndicators.trill = pathElement;
  }
}

// Export for use in PianoKeyboard
export default PianoExpressionHandler;
